{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "CMake configure (VS2022 x64 Debug)",
			"type": "shell",
			"command": "cmake -S . -B build -G \"Visual Studio 17 2022\" -A x64 -DCMAKE_BUILD_TYPE=Debug",
			"problemMatcher": [
				"$msCompile"
			],
			"group": "build"
		},
		{
			"label": "CMake: Configure+Build Debug (out-of-source)",
			"type": "shell",
			"command": "$ErrorActionPreference = 'Stop'; if (!(Test-Path -Path 'build')) { New-Item -ItemType Directory -Path 'build' | Out-Null }; Set-Location 'build'; cmake ..; cmake --build . --config Debug",
			"group": "build"
		},
		{
			"label": "CMake: Configure+Build Debug (INIT_SUBMODULES=OFF)",
			"type": "shell",
			"command": "$ErrorActionPreference = 'Stop'; if (!(Test-Path -Path 'build')) { New-Item -ItemType Directory -Path 'build' | Out-Null }; Set-Location 'build'; cmake .. -DINIT_SUBMODULES=OFF; cmake --build . --config Debug",
			"group": "build"
		},
		{
			"label": "Build after REST/unified/logger fixes",
			"type": "shell",
			"command": "$ErrorActionPreference = 'Stop'; if (!(Test-Path -Path 'build')) { New-Item -ItemType Directory -Path 'build' | Out-Null }; Set-Location 'build'; cmake ..; cmake --build . --config Debug",
			"group": "build"
		},
		{
			"label": "CMake: Build with Kolosal Server (minimal features)",
			"type": "shell",
			"command": "$ErrorActionPreference = 'Stop'; if (!(Test-Path -Path 'build')) { New-Item -ItemType Directory -Path 'build' | Out-Null }; Set-Location 'build'; cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_KOLOSAL_SERVER=ON -DUSE_PODOFO=OFF -DUSE_FAISS=OFF; cmake --build . --config Debug",
			"group": "build"
		},
		{
			"label": "CMake: Build with Kolosal Server (main target only)",
			"type": "shell",
			"command": "$ErrorActionPreference = 'Stop'; if (!(Test-Path -Path 'build')) { New-Item -ItemType Directory -Path 'build' | Out-Null }; Set-Location 'build'; cmake .. -DBUILD_KOLOSAL_SERVER=ON -DUSE_PODOFO=OFF -DUSE_FAISS=OFF; cmake --build . --config Debug",
			"group": "build"
		},
		{
			"label": "CMake: Build Test Executable (kolosal-agent-test.exe)",
			"type": "shell",
			"command": "$ErrorActionPreference = 'Stop'; if (!(Test-Path -Path 'build')) { New-Item -ItemType Directory -Path 'build' | Out-Null }; Set-Location 'build'; cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_TEST_EXECUTABLE=ON -DBUILD_KOLOSAL_SERVER=ON -DUSE_PODOFO=OFF -DUSE_FAISS=OFF; cmake --build . --config Debug --target kolosal-agent-test",
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			]
		},
		{
			"label": "CMake: Build Test Executable (Debug with extensive logging)",
			"type": "shell",
			"command": "$ErrorActionPreference = 'Stop'; if (!(Test-Path -Path 'build')) { New-Item -ItemType Directory -Path 'build' | Out-Null }; Set-Location 'build'; cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_TEST_EXECUTABLE=ON -DBUILD_KOLOSAL_SERVER=ON -DBUILD_WITH_RETRIEVAL=ON; cmake --build . --config Debug --target kolosal-agent-test",
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			]
		},
		{
			"label": "Run kolosal-agent-test.exe",
			"type": "shell",
			"command": "if (Test-Path 'build/kolosal-agent-test.exe') { & 'build/kolosal-agent-test.exe' } elseif (Test-Path 'build/Debug/kolosal-agent-test.exe') { & 'build/Debug/kolosal-agent-test.exe' } else { Write-Error 'kolosal-agent-test.exe not found. Build it first.' }",
			"group": "test",
			"dependsOn": "CMake: Build Test Executable (Debug with extensive logging)",
			"problemMatcher": []
		},
		{
			"label": "Run kolosal-agent-test.exe (verbose)",
			"type": "shell",
			"command": "if (Test-Path 'build/kolosal-agent-test.exe') { & 'build/kolosal-agent-test.exe' '--gtest_color=yes' '--gtest_print_time=1' '--verbose' } elseif (Test-Path 'build/Debug/kolosal-agent-test.exe') { & 'build/Debug/kolosal-agent-test.exe' '--gtest_color=yes' '--gtest_print_time=1' '--verbose' } else { Write-Error 'kolosal-agent-test.exe not found. Build it first.' }",
			"group": "test",
			"dependsOn": "CMake: Build Test Executable (Debug with extensive logging)",
			"problemMatcher": []
		},
		{
			"label": "CMake: Build Full Integration Test System",
			"type": "shell",
			"command": "$ErrorActionPreference = 'Stop'; if (!(Test-Path -Path 'build')) { New-Item -ItemType Directory -Path 'build' | Out-Null }; Set-Location 'build'; cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_TEST_EXECUTABLE=ON -DBUILD_KOLOSAL_SERVER=ON -DBUILD_WITH_RETRIEVAL=ON -DINIT_SUBMODULES=ON; cmake --build . --config Debug",
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			]
		},
		{
			"label": "Run Full Integration Tests (Python Runner)",
			"type": "shell",
			"command": "python scripts/run_integration_tests.py --workspace .",
			"group": "test",
			"dependsOn": "CMake: Build Full Integration Test System",
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Run Integration Tests (Direct Executable)",
			"type": "shell",
			"command": "if (Test-Path 'build/kolosal-agent-test.exe') { & 'build/kolosal-agent-test.exe' '--gtest_color=yes' '--gtest_print_time=1' '--gtest_filter=*Integration*' } elseif (Test-Path 'build/Debug/kolosal-agent-test.exe') { & 'build/Debug/kolosal-agent-test.exe' '--gtest_color=yes' '--gtest_print_time=1' '--gtest_filter=*Integration*' } else { Write-Error 'kolosal-agent-test.exe not found. Build it first.' }",
			"group": "test",
			"dependsOn": "CMake: Build Full Integration Test System",
			"problemMatcher": []
		},
		{
			"label": "Health Check System",
			"type": "shell",
			"command": "python scripts/health_check.py --save-report",
			"group": "test",
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Run Comprehensive Tests",
			"type": "shell",
			"command": "python scripts/comprehensive_test.py --report",
			"group": "test",
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Build and Run All Tests (Complete Pipeline)",
			"type": "shell",
			"command": "Write-Host 'üöÄ Starting Complete Test Pipeline'; python scripts/run_integration_tests.py --workspace .; if ($LASTEXITCODE -eq 0) { Write-Host '‚úÖ Integration tests passed, running comprehensive tests'; python scripts/comprehensive_test.py --report } else { Write-Host '‚ùå Integration tests failed' }",
			"group": "test",
			"dependsOn": "CMake: Build Full Integration Test System",
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		}
	]
}